 ## Precedence (from lowest to highest)
- logical_and/logical_or, 'and or', left
- equality, '== !=', left
- comparison, '> >= <= <', left
- term, '- +', left
- factor, '/ * %', left
- unary, '! -', right

## Grammer
# Statements execute, Expressions evaluate...
# Type: Stmt
- program     -> statement* EOF;
- statement   -> say_stmt | if_stmt | for_stmt | while_stmt | block_stmt | asgmt_stmt | expr_stmt;
- say_stmt    -> "say" expression;
- if_stmt     -> "if" "(" expression ")" statement ("else"
                 statement)?;
- block_stmt  -> "{" statement* "}";
- asgmt_stmt  -> "let" IDENTIFIER "=" expression();
- while_stmt  -> "while" "(" expression ")" statement*;
- for_stmt    -> "for" "(" (asgmt_stmt)? ";" (cond)? ";" (
                 expression)? ")" statement*;

- expression     -> logical;
- logical        -> equality (("or" | "and") equality)*;
- equality       -> comparison (("!=" | "==") comparison)*
- comparison     -> additive (("">" | ">=" | "<=" | "<") additive)*;
- additive       -> multiplicative (("-") | "+") multiplicative)*;
- multiplicative -> unary (("/" | "*" | "%") unary)*;
- unary          -> ("!" | "-") unary | primary;
- primary        -> value | fn | var | ("expression")";
- value          -> NUMBER | STRING | "true" | "false" | "nil";
- fn             -> IDENTIFIER "(" (expression ",")* ")";
- var            -> IDENTIFIER;

