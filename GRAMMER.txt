## Precedence (from lowest to highest)
- logical_and/logical_or, 'and or', left
- equality, '== !=', left
- comparison, '> >= <= <', left
- term, '- +', left
- factor, '/ *', left
- unary, '! -', right

## Grammer
# Type: Stmt
- program     -> declaration* EOF;
- declaration -> var_decl | var_redef | statement;
- statement   -> expr_stmt | say_stmnt | block |
                 if_stmt | while_stmt | for_stmt;
- say_stmt    -> "say" expression EOL;
- expr_stmt   -> expression EOL;

- block       -> "{" (EOL)? declaration* "}";
- if_stmt     -> "if" expression (EOL)? declaration
                 ((elif_statement)* | (else_stmt)?);
- if_stmt_body -> (declaration | block);
- elif_stmt   -> "elif" expression (EOL)? declaration
                 (else_statement)?;
- else_stmt   -> "else" (EOL)? declaration;
- for_stmt    -> "for" "(" (var_decl)? ";" (comparison)? ";" (expression)?
                 ")" (declaration | block);
- while_stmt  -> "while" expression (EOL)? (declaration | block);

- var_decl    -> "let" IDENTIFIER ("=" expression)? EOL;
- var_redef   -> IDENTIFIER "=" expression EOL;

# Type: Expr
- expression  -> logical;
- logical     -> equality (("or" | "and") equality)*;
- equality    -> comparison (("!=" | "==") comparison)*;
- comparison  -> term ((">" | ">=" | "<=" | "<") term)*;
- term        -> factor (("-") | "+") factor)*;
- factor      -> unary (("/" | "*") unary)*;
- unary       -> ("!" | "-") unary | primary;
- primary     -> NUMBER | STRING | "true" | "false" 
                 | "nil" | "("expression")" | IDENTIFIER | EOL;

