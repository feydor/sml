// This header file was generated by util/generate_ast
#ifndef EXPR_H
#define EXPR_H
#include "token.h"
#include <variant>
class Expr {};
template <typename T>
class Visitor {
    Visitor() {}
    virtual ~Visitor() {}

    virtual T visitBinaryExpr(Binary &expr) = 0;
    virtual T visitGroupingExpr(Grouping &expr) = 0;
    virtual T visitLiteralExpr(Literal &expr) = 0;
    virtual T visitUnaryExpr(Unary &expr) = 0;

};
class Binary : Expr {
    Expr left;
    Token op;
    Expr right;

public:
     Binary(Expr left, Token op, Expr right)
    : left(left), op(op), right(right) {};

};

    virtual T accept(Visitor<T> visitor);

class Grouping : Expr {
    Expr expr;

public:
     Grouping(Expr expr)
    : expr(expr) {};

};

    virtual T accept(Visitor<T> visitor);

class Literal : Expr {
    Placeholder val;

public:
     Literal(Placeholder val)
    : val(val) {};

};

    virtual T accept(Visitor<T> visitor);

class Unary : Expr {
    Token op;
    Expr right;

public:
     Unary(Token op, Expr right)
    : op(op), right(right) {};

};

    virtual T accept(Visitor<T> visitor);

