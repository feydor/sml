// This header file was generated by util/generate_ast
#ifndef EXPR_H
#define EXPR_H
#include "token.h"
#include <variant>

class Binary;
class Grouping;
class Literal;
class Unary;

class Visitor {
public:
    virtual std::string &visitBinaryExpr(Binary &expr) = 0;
    virtual std::string &visitGroupingExpr(Grouping &expr) = 0;
    virtual std::string &visitLiteralExpr(Literal &expr) = 0;
    virtual std::string &visitUnaryExpr(Unary &expr) = 0;
};

class Visitor_impl: public Visitor {
public:
    virtual std::string &visitBinaryExpr(Binary &expr);
    virtual std::string &visitGroupingExpr(Grouping &expr);
    virtual std::string &visitLiteralExpr(Literal &expr);
    virtual std::string &visitUnaryExpr(Unary &expr);
};

class Expr {
    virtual void accept(Visitor &visitor) = 0;
};

class Binary : public Expr {
    Expr &left;
    Token &op;
    Expr &right;

    public:
    Binary(Expr &left, Token &op, Expr &right)
        : left(left), op(op), right(right) {};

    virtual void accept(Visitor &v) override {
        v.visitBinaryExpr(*this);
    };
};


class Grouping : public Expr {
    Expr &expr;

    public:
    Grouping(Expr &expr)
        : expr(expr) {};
    virtual void accept(Visitor &v) override {
        v.visitGroupingExpr(*this);
    };
};

class Literal : public Expr {
    std::variant<double, std::string> val;

    public:
    Literal(double dbl)
        : val(dbl) {};
    Literal(std::string str)
        : val(str) {};
    virtual void accept(Visitor &v) override {
        v.visitLiteralExpr(*this);
    };
};


class Unary : public Expr {
    Token &op;
    Expr &right;

    public:
    Unary(Token &op, Expr &right)
        : op(op), right(right) {};

    virtual void accept(Visitor &v) override {
        v.visitUnaryExpr(*this);
    };
};

#endif
